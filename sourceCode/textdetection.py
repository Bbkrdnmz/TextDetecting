# -*- coding: utf-8 -*-
"""MetinAvcısı.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GFb3yPd0pWDq1tXmnvQrWVwQWER1E5GW

We add the necessary libraries for image processing, arithmetic calculation and data visualisation.
"""

import pandas as pd
import numpy as np

from glob import glob
from tqdm.notebook import tqdm

import matplotlib.pyplot as plt
from PIL import Image

plt.style.use('ggplot')

!apt-get install tesseract-ocr

"""Installation of **Tesseract**, a text extraction software"""

!pip install pytesseract

"""annot.parquet is for image text labelling, it contains the same information as the annot.csv file in dataset.

img.parquet has the metadata of the images. same as img.csv in dataset, but in Parquet format.
"""

annot = pd.read_parquet('/content/drive/MyDrive/text detection/annot.parquet')
imgs = pd.read_parquet('/content/drive/MyDrive/text detection/img.parquet')
img_fns = glob('/content/drive/MyDrive/text detection/train_images/*')

"""Image visualisation:"""

fig, ax = plt.subplots(figsize=(10, 10))
ax.imshow(plt.imread(img_fns[0]))
ax.axis('off')
plt.show()

"""It gives us information about the image that can help us extract text, such as the ID of the text tag, image ID, utf8_string, etc."""

image_id = img_fns[0].split('/')[-1].split('.')[0]
annot.query('image_id == @image_id')

"""25 images selected from the dataset are visualised on the same plane"""

fig, axs = plt.subplots(5, 5, figsize=(20, 20))
axs = axs.flatten()
for i in range(25):
    axs[i].imshow(plt.imread(img_fns[i]))
    axs[i].axis('off')
    image_id = img_fns[i].split('/')[-1].rstrip('.jpg')
    n_annot = len(annot.query('image_id == @image_id'))
    axs[i].set_title(f'{image_id} - {n_annot}')
plt.show()

"""The interface for using Tesseract OCR with Phyton is provided, the language to be used for text extraction is set to English."""

import pytesseract

print(pytesseract.image_to_string(img_fns[11], lang='eng'))

"""Among the selected images, the one with index 11, i.e. the 12th image, is displayed, the axis lines are removed."""

fig, ax = plt.subplots(figsize=(10,10))
ax.imshow(plt.imread(img_fns[11]))
ax.axis('off')
plt.show()

"""Installing Keras OCR:"""

!pip install keras-ocr -q

"""Keras is imported and a structure called pipeline is created containing the text definition components."""

import keras_ocr
pipeline = keras_ocr.pipeline.Pipeline()

"""The text definitions of the selected 12th image are made and the texts are transferred to the results variable with their positions."""

results = pipeline.recognize([img_fns[11]])

"""The available text and location information is tabulated with Pandas Dataframe."""

pd.DataFrame(results[0], columns=['text', 'bbox'])

"""The definitions obtained are visualised on the relevant picture."""

fig, ax = plt.subplots(figsize=(10, 10))
keras_ocr.tools.drawAnnotations(plt.imread(img_fns[11]), results[0], ax=ax)
ax.set_title('Keras OCR Result Example')
plt.show()

"""25 pictures are processed sequentially."""

pipeline = keras_ocr.pipeline.Pipeline()

dfs = []
for img in tqdm(img_fns[:25]):
    results = pipeline.recognize([img])
    result = results[0]
    img_id = img.split('/')[-1].split('.')[0]
    img_df = pd.DataFrame(result, columns=['text', 'bbox'])
    img_df['img_id'] = img_id
    dfs.append(img_df)
kerasocr_df = pd.concat(dfs)

"""Belirli bir görüntü üzerinde Keras OCR tarafından yapılan metin tanıma sonuçlarını ve bu sonuçları görsel olarak karşılaştırmak için tasarlanmış bir fonksiyon içerir."""

def plot_compare(img_fn, kerasocr_df):
    img_id = img_fn.split('/')[-1].split('.')[0]
    fig, axs = plt.subplots(1, 1, figsize=(15, 10))

    keras_results = kerasocr_df.query('img_id == @img_id')[['text','bbox']].values.tolist()
    keras_results = [(x[0], np.array(x[1])) for x in keras_results]
    keras_ocr.tools.drawAnnotations(plt.imread(img_fn),
                                    keras_results, ax=axs)
    axs.set_title('keras_ocr results', fontsize=24)
    plt.show()

"""İlgili 25 resmin Keras OCR sonuçları karşılaştırılır."""

# Loop over results
for img_fn in img_fns[:25]:
    plot_compare(img_fn, kerasocr_df)